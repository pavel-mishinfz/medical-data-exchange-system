version: "2.0"
volumes:
  # mongo-data:
  #   driver: local
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: ./mongo/data
  postgresql-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./postgresql/data
  template-service-storage:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ../services/template-service/storage
  user-service-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./user-service
  policy-enforcement-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./policy-enforcement-service
  medical-docs-service-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ../services/medical-docs-service/storage
  medical-card-service-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./medical-card-service
#  e2e-test-data:
#    driver: local
#    driver_opts:
#      o: bind
#      type: none
#      device: ./e2e_test
services:
  postgresql:
    image: postgres:14.9-alpine3.18
    volumes:
      - postgresql-data:/var/lib/postgresql/data 
    environment:
      POSTGRES_PASSWORD: 1111
      POSTGRES_USER: psgadmin
      POSTGRES_DB: medical-system
      PGDATA: /var/lib/postgresql/data/db-files/
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
  # mongo:
  #   image: mongo:7.0
  #   volumes:
  #     - mongo-data:/data/db
  #     - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     - MONGO_INITDB_DATABASE=medical-system
  template-service:
    image: medical-system/template-service:0.0.1
    volumes:
      - template-service-storage:/src/storage
    ports:
      - "5000:5000"
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN}
      PATH_TO_STORAGE: ${PATH_TO_STORAGE}
    depends_on:
      postgresql:
        condition: service_healthy
  medical-card-service:
    image: medical-system/medical-card-service:0.0.1
    volumes:
      - medical-card-service-data:/mnt/
    ports:
      - "5001:5000"
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN}
      DEFAULT_DATA_CONFIG_PATH: ${DEFAULT_DATA_CONFIG_PATH}
    depends_on:
      postgresql:
        condition: service_healthy
  user-service:
    image: medical-system/user-service:0.0.1
    ports:
      - "5002:5000"
    environment:
      POSTGRES_DSN_ASYNC: ${POSTGRES_DSN_ASYNC}
      JWT_SECRET: ${JWT_SECRET}
      RESET_PASSWORD_TOKEN_SECRET: ${RESET_PASSWORD_TOKEN_SECRET}
      VERIFICATION_TOKEN_SECRET: ${VERIFICATION_TOKEN_SECRET}
      OWN_EMAIL: ${OWN_EMAIL}
      OWN_EMAIL_PASSWORD: ${OWN_EMAIL_PASSWORD}
      DEFAULT_GROUPS_CONFIG_PATH: ${DEFAULT_GROUPS_CONFIG_PATH}
    volumes:
      - user-service-data:/mnt/
    depends_on:
      postgresql:
        condition: service_healthy
  health-diary-service:
    image: medical-system/health-diary-service:0.0.1
    ports:
      - "5003:5000"
    environment:
      POSTGRES_DSN_ASYNC: ${POSTGRES_DSN_ASYNC}
    depends_on:
      postgresql:
        condition: service_healthy
  medical-docs-service:
    image: medical-system/medical-docs-service:0.0.1
    volumes:
      - medical-docs-service-data:/src/storage
    ports:
      - "5004:5000"
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN}
      PATH_TO_STORAGE: ${PATH_TO_STORAGE}
    depends_on:
      postgresql:
        condition: service_healthy
  record-service:
    image: medical-system/record-service:0.0.1
    ports:
      - "5005:5000"
    environment:
      POSTGRES_DSN_ASYNC: ${POSTGRES_DSN_ASYNC}
    depends_on:
      postgresql:
        condition: service_healthy
  policy-enforcement-service:
    image: medical-system/policy-enforcement-service:0.0.1
    ports:
      - "5006:5000"
    volumes:
      - policy-enforcement-data:/mnt/
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POLICIES_CONFIG_PATH: ${POLICIES_CONFIG_PATH}
    depends_on:
      - template-service
      - medical-card-service
      - user-service
      - health-diary-service
      - medical-docs-service
#  test-runner:
#    image: python:3.11
#    volumes:
#      - e2e-test-data:/mnt/
#    command: >
#      bash -c "pip install --upgrade pip
#      && pip install requests pydantic sqlalchemy psycopg2-binary
#      && python -m unittest /mnt/test.py"
#    depends_on:
#      - policy-enforcement-service
