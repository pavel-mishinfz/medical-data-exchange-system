version: "2.0"
volumes:
  postgresql-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./postgresql/data
  user-service-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./user-service
  user-service-storage:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ../services/user-service/storage
  policy-enforcement-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./policy-enforcement-service
  medical-card-service-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./medical-card-service
  chat-service-storage:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ../services/chat-service/chat_storage
services:
  postgresql:
    image: postgres:14.9-alpine3.18
    volumes:
      - postgresql-data:/var/lib/postgresql/data 
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/db-files/
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
  policy-enforcement-service:
    image: medical-system/policy-enforcement-service:0.0.1
    ports:
      - "5000:5000"
    volumes:
      - policy-enforcement-data:/mnt/
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN}
      JWT_SECRET: ${JWT_SECRET}
      POLICIES_CONFIG_PATH: ${POLICIES_CONFIG_PATH}
    depends_on:
      - template-service
      - medical-card-service
      - user-service
      - health-diary-service
      - record-service
      - chat-service
  template-service:
    image: medical-system/template-service:0.0.1
    ports:
      - "5001:5000"
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN}
    depends_on:
      postgresql:
        condition: service_healthy
  medical-card-service:
    image: medical-system/medical-card-service:0.0.1
    volumes:
      - medical-card-service-data:/mnt/
    ports:
      - "5002:5000"
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN}
      DEFAULT_DATA_CONFIG_PATH: ${DEFAULT_DATA_CONFIG_PATH}
      ENCRYPT_KEY: ${ENCRYPT_KEY}
    depends_on:
      postgresql:
        condition: service_healthy
  user-service:
    image: medical-system/user-service:0.0.1
    ports:
      - "5003:5000"
    environment:
      POSTGRES_DSN_ASYNC: ${POSTGRES_DSN_ASYNC}
      JWT_SECRET: ${JWT_SECRET}
      RESET_PASSWORD_TOKEN_SECRET: ${RESET_PASSWORD_TOKEN_SECRET}
      VERIFICATION_TOKEN_SECRET: ${VERIFICATION_TOKEN_SECRET}
      OWN_EMAIL: ${OWN_EMAIL}
      OWN_EMAIL_PASSWORD: ${OWN_EMAIL_PASSWORD}
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: ${SMTP_PORT}
      DEFAULT_GROUPS_CONFIG_PATH: ${DEFAULT_GROUPS_CONFIG_PATH}
      DEFAULT_SPECIALIZATIONS_CONFIG_PATH: ${DEFAULT_SPECIALIZATIONS_CONFIG_PATH}
      PATH_TO_STORAGE: ${PATH_TO_USER_STORAGE}
    volumes:
      - user-service-data:/mnt/
      - user-service-storage:/src/storage
    depends_on:
      postgresql:
        condition: service_healthy
  health-diary-service:
    image: medical-system/health-diary-service:0.0.1
    ports:
      - "5004:5000"
    environment:
      POSTGRES_DSN_ASYNC: ${POSTGRES_DSN_ASYNC}
    depends_on:
      postgresql:
        condition: service_healthy
  record-service:
    image: medical-system/record-service:0.0.1
    ports:
      - "5005:5000"
    environment:
      POSTGRES_DSN_ASYNC: ${POSTGRES_DSN_ASYNC}
    depends_on:
      postgresql:
        condition: service_healthy
  chat-service:
    image: medical-system/chat-service:0.0.1
    ports:
      - "5006:5000"
    environment:
      POSTGRES_DSN_ASYNC: ${POSTGRES_DSN_ASYNC}
      CLIENT_ID: ${CLIENT_ID}
      ACCOUNT_ID: ${ACCOUNT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
      PATH_TO_STORAGE: ${PATH_TO_CHAT_STORAGE}
      ENCRYPT_KEY: ${ENCRYPT_KEY}
    volumes:
      - chat-service-storage:/src/chat_storage
    depends_on:
      postgresql:
        condition: service_healthy
